#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApp.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WorldMap")]
	public partial class DBEntityDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertpageCategory(pageCategory instance);
    partial void UpdatepageCategory(pageCategory instance);
    partial void DeletepageCategory(pageCategory instance);
    partial void Insertpage(page instance);
    partial void Updatepage(page instance);
    partial void Deletepage(page instance);
    #endregion
		
		public DBEntityDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBEntityDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBEntityDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBEntityDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBEntityDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<pageCategory> pageCategories
		{
			get
			{
				return this.GetTable<pageCategory>();
			}
		}
		
		public System.Data.Linq.Table<page> pages
		{
			get
			{
				return this.GetTable<page>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pageCategories")]
	public partial class pageCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private EntitySet<page> _pages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public pageCategory()
		{
			this._pages = new EntitySet<page>(new Action<page>(this.attach_pages), new Action<page>(this.detach_pages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pageCategory_page", Storage="_pages", ThisKey="ID", OtherKey="pagCategory_ID")]
		public EntitySet<page> pages
		{
			get
			{
				return this._pages;
			}
			set
			{
				this._pages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_pages(page entity)
		{
			this.SendPropertyChanging();
			entity.pageCategory = this;
		}
		
		private void detach_pages(page entity)
		{
			this.SendPropertyChanging();
			entity.pageCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pages")]
	public partial class page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _pagCategory_ID;
		
		private string _header;
		
		private string _html;
		
		private System.DateTime _created;
		
		private string _image;
		
		private bool _isTop;
		
		private EntityRef<pageCategory> _pageCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnpagCategory_IDChanging(int value);
    partial void OnpagCategory_IDChanged();
    partial void OnheaderChanging(string value);
    partial void OnheaderChanged();
    partial void OnhtmlChanging(string value);
    partial void OnhtmlChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnisTopChanging(bool value);
    partial void OnisTopChanged();
    #endregion
		
		public page()
		{
			this._pageCategory = default(EntityRef<pageCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pagCategory_ID", DbType="Int NOT NULL")]
		public int pagCategory_ID
		{
			get
			{
				return this._pagCategory_ID;
			}
			set
			{
				if ((this._pagCategory_ID != value))
				{
					if (this._pageCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpagCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._pagCategory_ID = value;
					this.SendPropertyChanged("pagCategory_ID");
					this.OnpagCategory_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_header", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string header
		{
			get
			{
				return this._header;
			}
			set
			{
				if ((this._header != value))
				{
					this.OnheaderChanging(value);
					this.SendPropertyChanging();
					this._header = value;
					this.SendPropertyChanged("header");
					this.OnheaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_html", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string html
		{
			get
			{
				return this._html;
			}
			set
			{
				if ((this._html != value))
				{
					this.OnhtmlChanging(value);
					this.SendPropertyChanging();
					this._html = value;
					this.SendPropertyChanged("html");
					this.OnhtmlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="NVarChar(400)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isTop", DbType="Bit NOT NULL")]
		public bool isTop
		{
			get
			{
				return this._isTop;
			}
			set
			{
				if ((this._isTop != value))
				{
					this.OnisTopChanging(value);
					this.SendPropertyChanging();
					this._isTop = value;
					this.SendPropertyChanged("isTop");
					this.OnisTopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="pageCategory_page", Storage="_pageCategory", ThisKey="pagCategory_ID", OtherKey="ID", IsForeignKey=true)]
		public pageCategory pageCategory
		{
			get
			{
				return this._pageCategory.Entity;
			}
			set
			{
				pageCategory previousValue = this._pageCategory.Entity;
				if (((previousValue != value) 
							|| (this._pageCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._pageCategory.Entity = null;
						previousValue.pages.Remove(this);
					}
					this._pageCategory.Entity = value;
					if ((value != null))
					{
						value.pages.Add(this);
						this._pagCategory_ID = value.ID;
					}
					else
					{
						this._pagCategory_ID = default(int);
					}
					this.SendPropertyChanged("pageCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
